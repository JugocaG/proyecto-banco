plugins {
    id 'java'
    id 'org.springframework.boot' version '2.7.14'
    id 'io.spring.dependency-management' version '1.0.15.RELEASE'
    id 'jacoco'
    id 'info.solidsoft.pitest' version '1.9.11'
    id("org.sonarqube") version "4.4.1.3373"
    id "com.avast.gradle.docker-compose" version "0.17.0"
    id "org.hidetake.swagger.generator" version "2.19.2"

}

group = 'com.unisabana'
version = '0.0.1-SNAPSHOT'


java {
    sourceCompatibility = '20'
}

pitest {
    junit5PluginVersion = "1.0.0"
}


configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation("mysql:mysql-connector-java:8.0.32")
    testImplementation("com.h2database:h2:2.2.220")
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    implementation "org.springframework.boot:spring-boot-starter-security"
    swaggerCodegen 'io.swagger.codegen.v3:swagger-codegen-cli:3.0.47'


}

swaggerSources {
    petstore {
        inputFile = file('petstore.yaml')
        code {
            language = 'html'
            jvmArgs = ['--add-opens=java.base/java.util=ALL-UNNAMED'] // for Swagger Codegen v3 on Java 16+
        }
    }
}

build.dependsOn generateSwaggerUI

tasks.named('test') {
    useJUnitPlatform()
}
pitest {
    junit5PluginVersion = "1.0.0"
}



jacoco {
    toolVersion = "0.8.9"
    layout.buildDirectory.dir("reports/jacoco")
}

jacocoTestReport {
    dependsOn test
    reports {
        xml.required = true
        csv.required = true
        html.outputLocation = layout.buildDirectory.dir('build/reports/jacoco.html')
    }
}

sonarqube {
    properties {
        property("sonar.projectName", "yms-gate")
    }
}

dockerCompose {
    useComposeFiles = ['docker-compose.yml']
}

//resolve {
//    outputFileName = 'PetStoreAPI'
//    outputFormat = 'JSON'
//    prettyPrint = 'TRUE'
//    classpath = sourceSets.main.runtimeClasspath
//    resourcePackages = ['io.test']
//    outputDir = file('test')
//}
